{"version":3,"sources":["index.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;6BAiBO,eAAe;;oBAChB,MAAM;;oBAER,MAAM;;;;wBAEP,WAAW;;;;;;;AAK3B,IAAI,QAAQ,GAAG,SAAX,QAAQ,CAAI,KAAK,EAAE,GAAG,EAAK;AAC3B,QAAI,OAAO,GAAG,GAAG,IAAI,EAAE,CAAC;;AAExB,SAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AACpB,YAAI,OAAO,GAAG,mBAdd,KAAK,EAce,MAAM,EAAE,CAAC,UAb7B,IAAI,EAa8B,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;AAEnD,eAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAI;mBAAK,2BAAI,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;SAAA,CAAC,CAAC;AAClE,eAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAI;mBAAK,2BAAI,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;SAAA,CAAC,CAAC;KACrE,CAAC,CAAC;CACN,CAAC;;AAEF,IAAI,GAAG,GAAG,SAAN,GAAG,CAAI,GAAG,EAAE,GAAG,EAAK;AACpB,+BAAI,8BAA8B,CAAC,CAAC;;AAEpC,2BAAK,GAAG,EAAE,EAAC,GAAG,EAAE,GAAG,EAAC,EAAE,UAAC,GAAG,EAAE,KAAK,EAAK;AAClC,YAAI,GAAG,EAAE;AAAC,mBAAO;SAAC;;AAElB,gBAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KACxB,CAAC,CAAC;;AAEH,+BAAI,iCAAiC,CAAC,CAAC;CAC1C,CAAC;;AAEF,IAAI,WAAW,GAAG,SAAd,WAAW,CAAI,OAAO,EAAE,WAAW,EAAE,GAAG,EAAK;AAC7C,OAAG,CAAC,UAjCA,IAAI,EAiCC,OAAO,EAAE,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;CACxC,CAAC;;QAEM,GAAG,GAAH,GAAG;QAAE,QAAQ,GAAR,QAAQ;QAAE,WAAW,GAAX,WAAW","file":"index.js","sourcesContent":["'use strict';\n\n/*\n *  ______                     _________\n *  ___  /_____________ _____________  /\n *  __  __ \\  __ \\  __ `/_  ___/  __  /\n *  _  /_/ / /_/ / /_/ /_  /   / /_/ /\n *  /_.___/\\____/\\__,_/ /_/    \\__,_/\n *      a minimalist dashboard and monitoring solution.\n *\n * This program is distributed under the terms of the MIT license.\n * Please see `LICENSE.md` file for details.\n *\n * Send your comments and suggestions to…\n * <https://github.com/v0lkan/board/issues>\n */\n\nimport {spawn} from 'child_process';\nimport {join} from 'path';\n\nimport glob from 'glob';\n\nimport log from 'board.log';\n\n// TODO: this module can be a more general-purpose module; consider renaming\n// it and publishing as something else.\n\nlet runFiles = (files, cwd) => {\n    let dirName = cwd || '';\n\n    files.forEach((file) => {\n        let process = spawn('node', [join(dirName, file)]);\n\n        process.stdout.on('data', (data) => log('OUT:', data.toString()));\n        process.stderr.on('data', (data) => log('ERR:', data.toString()));\n    });\n};\n\nlet run = (cwd, glb) => {\n    log('Board:: Starting Job Runner…');\n\n    glob(glb, {cwd: cwd}, (err, files) => {\n        if (err) {return;}\n\n        runFiles(files, cwd);\n    });\n\n    log('Board:: Job Runner has started.');\n};\n\nlet runRelative = (dirName, relativeCwd, glb) => {\n    run(join(dirName, relativeCwd), glb);\n};\n\nexport {run, runFiles, runRelative};\n"]}